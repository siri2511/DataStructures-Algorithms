package com.dsa.datastructures.circularsinglylinkedlist;

public class CircularSingleList {
	Node head;
	Node tail;
	
	//insert node at end
	public void insert(int data) {
		Node node = new Node();
		node.data=data;
		if(head==null) {
			head=node;
			tail=node;
			node.next=head;
		}
		else {
			tail.next=node;
			node.next=head;
			tail=node;
		}
	}
	
	//insert node at start
	public void insertAtStart(int data) {
		Node node = new Node();
		node.data=data;
		if(tail==null) {
			head=node;
			tail=node;
			node.next=head;
		}
		else {
			node.next=head;
			tail.next=node;
			head=node;
		}
	}
	
	//insert at specific index
	public void insertAt(int index, int data) {
		Node node = new Node();
		node.data = data;
		if(tail==null) {
			if(index!=0) {
				System.out.println("Invalid operation");
			}
			else {
				tail=node;
				tail.next=tail;
			}
		}
		if(index==0) {
			insertAtStart(data);
		}
		else {
			Node curr = tail.next;
			for(int i=0; i<index-1; i++) {
				curr=curr.next;
			}
			node.next=curr.next;
			curr.next=node;
			if(tail==curr) {
				tail=node;
			}
		}
	}
	
	//delete from start
	public void deleteAtStart() {
		if(tail==null) {
			System.out.println("Invalid operation");
		}
		if(head==tail) {
			tail=null;
		}
		else {
			tail.next=head.next;
			head.next=null;
		}
	}
	
	public void show() {
		Node curr = head;
		if(head==null) {
			System.out.println("List is empty");
		}
		else {
			do {
				System.out.print(curr.data+" ");
				curr=curr.next;
			}while(curr!=head);
			System.out.println();
		}
	}
	
	public int head() {
		return head.data;
	}
}
